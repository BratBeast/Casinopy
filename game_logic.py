import random
from dataclasses import dataclass
from abc import ABC, abstractmethod

#–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–∞–Ω–∞–ª–æ–≥ struct –∑ C++)
#@dataclass –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (__init__)
@dataclass
class GameResult:
    """–ü—Ä–æ—Å—Ç–∏–π –∫–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥—É."""
    primary_value: any
    is_win: bool
    money_delta: float


#2. "–ö–æ–Ω—Ç—Ä–∞–∫—Ç" IGame (–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å)
#—É—Å—ñ –Ω–∞—à—ñ —ñ–≥—Ä–∏ –ú–£–°–Ø–¢–¨ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ü—ñ –º–µ—Ç–æ–¥–∏.
class IGame(ABC):
    """–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å—ñ—Ö —ñ–≥–æ—Ä –∫–∞–∑–∏–Ω–æ."""

    @abstractmethod
    def play_once(self) -> GameResult:
        """
        –ó–∞–ø—É—Å–∫–∞—î –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –≥—Ä–∏.
        :return: –û–±'—î–∫—Ç GameResult –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        """
        pass

    @abstractmethod
    def get_game_name(self) -> str:
        """
        :return: –ù–∞–∑–≤–∞ –≥—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI.
        """
        pass

class DiceGame(IGame):
    """—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ –≤ –∫–æ—Å—Ç—ñ. –¥—É–±–ª—å = –ø–µ—Ä–µ–º–æ–≥–∞."""

    def get_game_name(self) -> str:
        return "–ì—Ä–∞ –≤ –ö–æ—Å—Ç—ñ"

    def play_once(self) -> GameResult:
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)

        is_win = (dice1 == dice2)

        if is_win:
            money_delta = 4.0  #–≤–∏–≥—Ä–∞—à (—Å—Ç–∞–≤–∫–∞ 1, –≤–∏–≥—Ä–∞–ª–∏ 4)
        else:
            money_delta = -1.0  #–ø—Ä–æ–≥—Ä–∞—à (–≤—Ç—Ä–∞—Ç–∏–ª–∏ —Å—Ç–∞–≤–∫—É 1)

        #–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return GameResult(
            primary_value=(dice1 + dice2),  #–∑–±–µ—Ä–µ–∂–µ–º–æ —Å—É–º—É
            is_win=is_win,
            money_delta=money_delta
        )



# --- –ë–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
if __name__ == "__main__":
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ DiceGame...")

    game = DiceGame()
    print(f"–ì—Ä–∞: {game.get_game_name()}")

    wins = 0
    balance = 0
    runs = 1000

    for _ in range(runs):
        result = game.play_once()
        if result.is_win:
            wins += 1
        balance += result.money_delta

    print(f"–ó—ñ–≥—Ä–∞–Ω–æ {runs} —ñ–≥–æ—Ä.")
    print(f"–í–∏–≥—Ä–∞—à—ñ–≤: {wins} ({(wins / runs) * 100:.2f}%)")
    print(f"–ë–∞–ª–∞–Ω—Å: {balance}")

    class SlotsGame(IGame):
        """
        –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ –≤ –°–ª–æ—Ç–∏.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î "–∑–≤–∞–∂–µ–Ω—ñ" –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ.
        """

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ —ó—Ö "–≤–∞–≥—É" (—à–∞–Ω—Å –≤–∏–ø–∞–¥—ñ–Ω–Ω—è)
        # –ß–∏–º –±—ñ–ª—å—à–∞ "–≤–∞–≥–∞", —Ç–∏–º —á–∞—Å—Ç—ñ—à–µ –≤–∏–ø–∞–¥–∞—î.
        SYMBOLS = ["üçí", "üçã", "üçä", "BAR", "üîî", "7Ô∏è‚É£"]
        WEIGHTS = [25, 20, 15, 15, 10, 5]  # –†–∞–∑–æ–º 90

        def get_game_name(self) -> str:
            return "–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞"

        def play_once(self) -> GameResult:
            # 1. "–ö—Ä—É—Ç–∏–º–æ" 3 –±–∞—Ä–∞–±–∞–Ω–∏
            # random.choices –¥–æ–∑–≤–æ–ª—è—î –≤–∫–∞–∑–∞—Ç–∏ "–≤–∞–≥—É" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            # k=3 –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ —Ö–æ—á–µ–º–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            reels = random.choices(self.SYMBOLS, self.WEIGHTS, k=3)

            # reels –±—É–¥–µ —Å–ø–∏—Å–∫–æ–º, –Ω–∞–ø—Ä. ["üçí", "BAR", "üçí"]

            # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª–∞
            is_win = False
            money_delta = -1.0  # –°—Ç–∞–≤–∫–∞ = -1 –º–æ–Ω–µ—Ç–∞

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ 3 —Å–∏–º–≤–æ–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ
            if reels[0] == reels[1] and reels[1] == reels[2]:
                is_win = True
                symbol = reels[0]

                # 3. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–≥—Ä–∞—à
                if symbol == "üçí":
                    money_delta = 5.0
                elif symbol == "üçã":
                    money_delta = 10.0
                elif symbol == "üçä":
                    money_delta = 15.0
                elif symbol == "BAR":
                    money_delta = 25.0
                elif symbol == "üîî":
                    money_delta = 50.0
                elif symbol == "7Ô∏è‚É£":
                    money_delta = 100.0  # –î–∂–µ–∫–ø–æ—Ç!

            # 4. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            # primary_value –±—É–¥–µ —Ä—è–¥–∫–æ–º, –Ω–∞–ø—Ä. "üçí-BAR-üçí"
            return GameResult(
                primary_value=" ".join(reels),
                is_win=is_win,
                money_delta=money_delta
            )


    # --- –ë–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
    if __name__ == "__main__":
        print("\n" + "=" * 30 + "\n")
        print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ SlotsGame...")

        slot_game = SlotsGame()
        print(f"–ì—Ä–∞: {slot_game.get_game_name()}")

        slot_balance = 0
        slot_runs = 100000  # –î–ª—è —Å–ª–æ—Ç—ñ–≤ —Ç—Ä–µ–±–∞ –±—ñ–ª—å—à–µ –∑–∞–ø—É—Å–∫—ñ–≤

        for _ in range(slot_runs):
            result = slot_game.play_once()
            slot_balance += result.money_delta

        #—Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RTP (Return To Player)
        #—Å–∫—ñ–ª—å–∫–∏ % –≥—Ä–æ—à–µ–π –ø–æ–≤–µ—Ä–Ω—É–ª–æ—Å—è –≥—Ä–∞–≤—Ü—é
        rtp = (slot_balance + slot_runs) / slot_runs * 100

        print(f"–ó—ñ–≥—Ä–∞–Ω–æ {slot_runs} —Å–ø—ñ–Ω—ñ–≤.")
        print(f"–ë–∞–ª–∞–Ω—Å: {slot_balance}")
        print(f"RTP (Return To Player): {rtp:.2f}%")